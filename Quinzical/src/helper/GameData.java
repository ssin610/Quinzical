package helper;

import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

public class GameData {
	
	// store the players winnings, questions they have answered, questions and categories that have been randomly selected,
	// and whether the categories and clues need to be randomly generated again
	private static int winnings = 0;
	private static ArrayList<String> answeredQuestions = new ArrayList<String>();
	private static ArrayList<String> addedQuestions = new ArrayList<String>();
	private static ArrayList<String> addedCategories = new ArrayList<String>();
	private static boolean random = true;
	private static int _totalWin=0;
	private static boolean international = false;
	
	/**
	 * If saved data exists from a previous playthrough, load in this data
	 * so the user can continue with their progress
	 */
	public static void readSavedData() {
		
		File w = new File("winnings");
		if (w.exists()) {
			GameData.setWinnings(Integer.valueOf(TextFileReader.read(w).get(0))); // if winnings have previously been saved, read from
			GameData.setTotalWings(Integer.valueOf(TextFileReader.read(w).get(1))); // if total winnings have previously been saved, read from
		}
		File an = new File("answeredQuestions");
		if (an.exists()) {
			GameData.setAnsweredQuestions((ArrayList<String>) TextFileReader.read(an)); // if answered questions have previously been
																		// saved, read from this file
		}
		File ad = new File("addedQuestions");
		if (ad.exists()) {
			GameData.setAddedQuestions((ArrayList<String>) TextFileReader.read(ad)); // if added questions have previously been
																	// saved, read from this file
			GameData.setRandom(false);
		}
		File ac = new File("addedCategories");
		if (ac.exists()) {
			GameData.setAddedCategories((ArrayList<String>) TextFileReader.read(ac)); // if answered questions have previously been
																	// saved, read from this file
		}
		File ib = new File("international");
		if (ib.exists()) {
			GameData.setInternational(Boolean.valueOf(TextFileReader.read(ib).get(0))); // if answered questions have previously been
																	// saved, read from this file
		}
	}
	
	/**
	 * When the user exits the game, save their playthrough data
	 * to separate files
	 */
	public static void writeSavedData() {
		ArrayList<String> winnings = new ArrayList<String>();
		winnings.add(Integer.toString(GameData.getWinnings()));
		winnings.add(Integer.toString(GameData.getTotalWings()));
		if (GameData.getAddedCategories().size() != 0) {
			try {
				TextFileWriter.write("international", String.valueOf(international), null);
				TextFileWriter.write("winnings", null, winnings);// save winngs to winnings and total winnings as the second line
				TextFileWriter.write("answeredQuestions", null, answeredQuestions);
				TextFileWriter.write("addedQuestions", null, addedQuestions);
				TextFileWriter.write("addedCategories", null, addedCategories);
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}
	}
	
    /**
	 * This method resets all fields back to their original state and also d
	 * deletes the files containing saved data
	 */
	public static void resetData() {
		winnings = 0;
    	answeredQuestions.clear();
    	addedQuestions.clear();
    	addedCategories.clear();
    	random = true;
    	international = false;
        File w = new File("winnings");
        w.delete();
        File an = new File("answeredQuestions");
        an.delete();
        File ad = new File("addedQuestions");
        ad.delete();
        File ac = new File("addedCategories");
        ac.delete();
        File ib = new File("international");
        ib.delete();
	}
	
	/**
	 * Set the total winnings
	 */
	public static void setTotalWings(int value) {
		_totalWin=value;
	}
	
	/**
	 * Return the total winnings
	 */
	public static int getTotalWings() {
		return _totalWin;
	}
	
	/**
	 * Set the user's winnings for this playthrough
	 */
	public static void setWinnings(int value) {
		if (value == 0) {
			winnings = 0;
		}
		winnings += value;
	}
	
	/**
	 * Set whether the user has selected their 5 categories
	 */
	public static void setRandom(Boolean bool) {
		random = bool;
	}
	
	/**
	 * Set the array of answered questions
	 */
	public static void setAnsweredQuestions(ArrayList<String> arrayList) {
		answeredQuestions = arrayList;
	}
	
	/**
	 * Set the array of added questions
	 */
	public static void setAddedQuestions(ArrayList<String> arrayList) {
		addedQuestions = arrayList;
	}
	
	/**
	 * Set the array of added categories
	 */
	public static void setAddedCategories(ArrayList<String> arrayList) {
		addedCategories = arrayList;
	}
	
	/**
	 * Indicate a question as answered by adding it to the array
	 */
	public static void addAnsweredQuestion(String question) {
		if (question == null) {
			answeredQuestions.clear();
		} else {
			answeredQuestions.add(question);
		}
	}
	
	/**
	 * Indicate a question as being randomly generated by adding
	 * it to the array
	 */
	public static void addAddedQuestion(String question) {
		if (question == null) {
			addedQuestions.clear();
		} else {
			addedQuestions.add(question);
		}
	}
	
	/**
	 * Indicate a category as being selected by adding it to
	 * the array
	 */
	public static void addCategory(String category) {
		if (category == null) {
			addedCategories.clear();
		} else {
			addedCategories.add(category);
		}
	}
	
	/**
	 * Return the users winnings for this playthrough
	 */
	public static int getWinnings() {
		return winnings;
	}
	
	/**
	 * Return whether the user has selected their 5 categories
	 */
	public static boolean getRandom() {
		return random;
	}
	
	/**
	 * Return whether the international category has been unlocked
	 */
	public static boolean getInternational() {
		return international;
	}
	
	/**
	 * Set whether the international category has been unlocked
	 */
	public static void setInternational(Boolean bool) {
		international = bool;
	}
	
	/**
	 * Return the list of randomly generated questions
	 */
	public static ArrayList<String> getAddedQuestions() {
		return addedQuestions;
	}
	
	/**
	 * Return the list of answered questions
	 */
	public static ArrayList<String> getAnsweredQuestions() {
		return answeredQuestions;
	}
	
	/**
	 * Return the list of selected categories
	 */
	public static ArrayList<String> getAddedCategories() {
		return addedCategories;
	}
	
}
